--1
SELECT TITLE, COUNT(STUDENT_ID)
FROM ENROLLMENT
JOIN LECTURE USING (LECTURE_ID)
GROUP BY TITLE
HAVING COUNT(STUDENT_ID) >= 1
ORDER BY COUNT(STUDENT_ID);

--2
SELECT TITLE, T.NAME, STATUS
FROM ENROLLMENT
JOIN STUDENT S USING (STUDENT_ID)
JOIN LECTURE USING (LECTURE_ID)
JOIN TEACHER T USING (TEACHER_ID) 
WHERE STUDENT_ID = 1001 AND STATUS = 'Y';

--3
SELECT SUBJECT, COUNT(LECTURE_ID)
FROM TEACHER
JOIN LECTURE USING (TEACHER_ID)
WHERE LECTURE_ID IS NOT NULL
GROUP BY SUBJECT
ORDER BY SUBJECT;

--4
SELECT TITLE, ROUND(AVG(NVL(GRADE_SCORE, 0)), 2) AS AVG_SCORE
FROM ENROLLMENT
JOIN LECTURE USING (LECTURE_ID)
GROUP BY LECTURE_ID, TITLE
HAVING ROUND(AVG(NVL(GRADE_SCORE, 0)), 2) >= 80;

--5
SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER TRI
AFTER INSERT ON ENROLLMENT
FOR EACH ROW
BEGIN
    IF (:NEW.STATUS = 'IN') 
        THEN UPDATE LECTURE
            SET INDEX_COUNT = NVL(INDEX_COUNT, 0) + 1
            WHERE LECTURE_ID = :NEW.LECTURE_ID;
    ELSE
        UPDATE LECTURE
            SET INDEX_COUNT = NVL(INDEX_COUNT, 0) - 1
            WHERE LECTURE_ID = :NEW.LECTURE_ID;
    END IF;
END;
/
